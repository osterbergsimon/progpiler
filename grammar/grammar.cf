PDefs. Program ::= [Def] ;

DFun. Def   ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;
DNFun. Def  ::= Type Id "(" [Arg] ")" ";" ;
DIFun. Def  ::= "inline" Type Id "(" [Arg] ")" "{" [Stm] "}" ;
DIFun2. Def ::= "inline" Type Id "(" [Arg] ")" ";" ;


DQC. Def          ::=  "using" QCList ";" ;
DTypeD. Def       ::= "typedef" Type Id ";" ;
DDecl. Def        ::= Dec ;
DStruct. Def      ::= "struct" Id "{" [Dec] "}" ";" ;

ArgDecl. Arg      ::= Argument ;
CArgDecl. Arg     ::= "const" Argument ;
Decl. Dec         ::= Declaration ";" ;
CDecl. Dec        ::= "const" Declaration ";" ;

separator Dec "" ;
separator Arg "," ;
terminator Stm "" ;
terminator Def "" ;

rules Argument   ::= Type | Type Id | Type Id "=" Exp | Type "&" | Type "&" Id | Type "&" Id "=" Exp ;
rules Declaration::= Type [Id] | Type Id "=" Exp | Type "&" [Id] | Type "&" Id "=" Exp ;


SExp. Stm        ::= Exp ";" ;
SReturn. Stm     ::= "return" Exp ";" ;
SReturnVoid. Stm ::= "return" ";" ;
SWhile. Stm      ::= "while" "(" Exp ")" Stm ;
SDoWhile. Stm    ::= "do" Stm "while" "(" Exp ")" ";";
SBlock. Stm      ::= "{" [Stm] "}" ;
SIf. Stm         ::= "if" "(" Exp ")" Stm ;
SIfElse. Stm     ::= "if" "(" Exp ")" Stm "else" Stm ;
SFor. Stm        ::= "for" "(" Type Exp ";" Exp ";" Exp ")" Stm ;
STypedef. Stm    ::= "typedef" Type Id ";" ;
SStruct. Stm     ::= "struct" Id "{" [Dec] "}" ";" ;
SDec. Stm        ::= Dec ;


EInt. Exp16      ::= Integer ;
EDouble. Exp16   ::= Double ;
EString. Exp16   ::= [String] ;
EChar. Exp16     ::= Char ;
ETrue. Exp16     ::= "true" ;
EFalse. Exp16    ::= "false" ;
ECid. Exp16      ::= QCList ;
ECall. Exp15     ::= Id "(" [Exp] ")" ;
EInd. Exp15      ::= Id "[" Exp "]" ;
EPIncr. Exp14    ::= Exp15 "++" ;
EPDecr. Exp14    ::= Exp15 "--" ;
EPStr1. Exp14    ::= Exp14 "." Exp15 ;
EPStr2. Exp14    ::= Exp14 "->" Exp15 ;
EDeref. Exp13    ::= "*" Exp14 ;
EIncr. Exp13     ::= "++" Exp14 ;
EDecr. Exp13     ::= "--" Exp14 ;
ENeg. Exp13      ::= "!" Exp14 ;
EMul. Exp12      ::= Exp12 "*" Exp13 ;
EDiv. Exp12      ::= Exp12 "/" Exp13 ;
ERem. Exp12      ::= Exp12 "%" Exp13 ;
EAdd. Exp11      ::= Exp11 "+" Exp12 ;
ESub. Exp11      ::= Exp11 "-" Exp12 ;
ELef. Exp10      ::= Exp10 "<<" Exp11 ;
ERig. Exp10      ::= Exp10 ">>" Exp11 ;
ELt. Exp9        ::= Exp10 "<" Exp10 ;
EGt. Exp9        ::= Exp10 ">" Exp10 ;
ELEq. Exp9       ::= Exp10 "<=" Exp10 ;
EGEq. Exp9       ::= Exp10 ">=" Exp10 ;
EEq. Exp8        ::= Exp9 "==" Exp9 ;
ENEq. Exp8       ::= Exp9 "!=" Exp9 ;
EAnd. Exp4       ::= Exp4 "&&" Exp5 ;
EOr. Exp3        ::= Exp3 "||" Exp4 ;
EAss. Exp2       ::= Exp3 "=" Exp2 ;
EPAss. Exp2      ::= Exp3 "+=" Exp2 ;
ENAss. Exp2      ::= Exp3 "-=" Exp2 ;
ECon. Exp2       ::= Exp3 "?" Exp2 ":" Exp2 ;
EExc. Exp1       ::= "throw" Exp2 ;

coercions Exp 16 ;
separator Exp "," ;
separator nonempty String "" ;

rules Type ::= "bool" | "int" | "double" | "void" | QCList ;
separator nonempty Type "," ;

QCL. QCList   ::= [Qcons];
QId. Qcons    ::= Id ;
QTempi. Qcons ::= Id "<"[Type]">" ;
separator nonempty Qcons "::" ;

position token Id (letter (letter | digit | '_')*) ;
separator nonempty Id "," ;

comment "#" ;
comment "//" ;
comment "/*" "*/" ;
