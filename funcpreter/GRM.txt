-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.10 from Fun/Par.y
-----------------------------------------------------------------------------


terminal L_err is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	%start_pDef -> Def                                 (1)
	%start_pListDef -> ListDef                         (2)
	%start_pListIdent -> ListIdent                     (3)
	%start_pExp3 -> Exp3                               (4)
	%start_pExp2 -> Exp2                               (5)
	%start_pExp1 -> Exp1                               (6)
	%start_pExp -> Exp                                 (7)
	Ident -> L_ident                                   (8)
	Integer -> L_integ                                 (9)
	Program -> ListDef                                 (10)
	Def -> Ident ListIdent '=' Exp                     (11)
	ListDef ->                                         (12)
	ListDef -> ListDef Def ';'                         (13)
	ListIdent ->                                       (14)
	ListIdent -> ListIdent Ident                       (15)
	Exp3 -> Ident                                      (16)
	Exp3 -> Integer                                    (17)
	Exp3 -> '(' Exp ')'                                (18)
	Exp2 -> Exp2 Exp3                                  (19)
	Exp2 -> Exp3                                       (20)
	Exp1 -> Exp1 '+' Exp2                              (21)
	Exp1 -> Exp1 '-' Exp2                              (22)
	Exp1 -> Exp1 '<' Exp2                              (23)
	Exp1 -> Exp2                                       (24)
	Exp -> 'if' Exp1 'then' Exp1 'else' Exp            (25)
	Exp -> '\\' Ident '->' Exp                         (26)
	Exp -> Exp1                                        (27)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'+'            { PT _ (TS _ 3) }
	'-'            { PT _ (TS _ 4) }
	'->'           { PT _ (TS _ 5) }
	';'            { PT _ (TS _ 6) }
	'<'            { PT _ (TS _ 7) }
	'='            { PT _ (TS _ 8) }
	'\\'           { PT _ (TS _ 9) }
	'else'         { PT _ (TS _ 10) }
	'if'           { PT _ (TS _ 11) }
	'then'         { PT _ (TS _ 12) }
	L_ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }
	L_err          { _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	%start_pDef     rule  1
	%start_pListDef rule  2
	%start_pListIdent rule  3
	%start_pExp3    rule  4
	%start_pExp2    rule  5
	%start_pExp1    rule  6
	%start_pExp     rule  7
	Ident           rule  8
	Integer         rule  9
	Program         rule  10
	Def             rule  11
	ListDef         rules 12, 13
	ListIdent       rules 14, 15
	Exp3            rules 16, 17, 18
	Exp2            rules 19, 20
	Exp1            rules 21, 22, 23, 24
	Exp             rules 25, 26, 27

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	L_ident        reduce using rule 12
	%eof           reduce using rule 12

	Program        goto state 27
	ListDef        goto state 28

State 1


	L_ident        shift, and enter state 9

	Ident          goto state 25
	Def            goto state 26

State 2


	L_ident        reduce using rule 12
	%eof           reduce using rule 12

	ListDef        goto state 24

State 3


	L_ident        reduce using rule 14
	%eof           reduce using rule 14

	ListIdent      goto state 23

State 4


	'('            shift, and enter state 16
	L_ident        shift, and enter state 9
	L_integ        shift, and enter state 19

	Ident          goto state 10
	Integer        goto state 11
	Exp3           goto state 22

State 5


	'('            shift, and enter state 16
	L_ident        shift, and enter state 9
	L_integ        shift, and enter state 19

	Ident          goto state 10
	Integer        goto state 11
	Exp3           goto state 12
	Exp2           goto state 21

State 6


	'('            shift, and enter state 16
	L_ident        shift, and enter state 9
	L_integ        shift, and enter state 19

	Ident          goto state 10
	Integer        goto state 11
	Exp3           goto state 12
	Exp2           goto state 13
	Exp1           goto state 20

State 7


	'('            shift, and enter state 16
	'\\'           shift, and enter state 17
	'if'           shift, and enter state 18
	L_ident        shift, and enter state 9
	L_integ        shift, and enter state 19

	Ident          goto state 10
	Integer        goto state 11
	Exp3           goto state 12
	Exp2           goto state 13
	Exp1           goto state 14
	Exp            goto state 15

State 8


	L_ident        shift, and enter state 9


State 9

	Ident -> L_ident .                                  (rule 8)

	'('            reduce using rule 8
	')'            reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'->'           reduce using rule 8
	';'            reduce using rule 8
	'<'            reduce using rule 8
	'='            reduce using rule 8
	'else'         reduce using rule 8
	'then'         reduce using rule 8
	L_ident        reduce using rule 8
	L_integ        reduce using rule 8
	%eof           reduce using rule 8


State 10

	Exp3 -> Ident .                                     (rule 16)

	'('            reduce using rule 16
	')'            reduce using rule 16
	'+'            reduce using rule 16
	'-'            reduce using rule 16
	';'            reduce using rule 16
	'<'            reduce using rule 16
	'else'         reduce using rule 16
	'then'         reduce using rule 16
	L_ident        reduce using rule 16
	L_integ        reduce using rule 16
	%eof           reduce using rule 16


State 11

	Exp3 -> Integer .                                   (rule 17)

	'('            reduce using rule 17
	')'            reduce using rule 17
	'+'            reduce using rule 17
	'-'            reduce using rule 17
	';'            reduce using rule 17
	'<'            reduce using rule 17
	'else'         reduce using rule 17
	'then'         reduce using rule 17
	L_ident        reduce using rule 17
	L_integ        reduce using rule 17
	%eof           reduce using rule 17


State 12

	Exp2 -> Exp3 .                                      (rule 20)

	'('            reduce using rule 20
	')'            reduce using rule 20
	'+'            reduce using rule 20
	'-'            reduce using rule 20
	';'            reduce using rule 20
	'<'            reduce using rule 20
	'else'         reduce using rule 20
	'then'         reduce using rule 20
	L_ident        reduce using rule 20
	L_integ        reduce using rule 20
	%eof           reduce using rule 20


State 13

	Exp2 -> Exp2 . Exp3                                 (rule 19)
	Exp1 -> Exp2 .                                      (rule 24)

	'('            shift, and enter state 16
	')'            reduce using rule 24
	'+'            reduce using rule 24
	'-'            reduce using rule 24
	';'            reduce using rule 24
	'<'            reduce using rule 24
	'else'         reduce using rule 24
	'then'         reduce using rule 24
	L_ident        shift, and enter state 9
	L_integ        shift, and enter state 19
	%eof           reduce using rule 24

	Ident          goto state 10
	Integer        goto state 11
	Exp3           goto state 32

State 14

	Exp1 -> Exp1 . '+' Exp2                             (rule 21)
	Exp1 -> Exp1 . '-' Exp2                             (rule 22)
	Exp1 -> Exp1 . '<' Exp2                             (rule 23)
	Exp -> Exp1 .                                       (rule 27)

	')'            reduce using rule 27
	'+'            shift, and enter state 33
	'-'            shift, and enter state 34
	';'            reduce using rule 27
	'<'            shift, and enter state 35
	%eof           reduce using rule 27


State 15

	%start_pExp -> Exp .                                (rule 7)

	%eof           accept


State 16

	Exp3 -> '(' . Exp ')'                               (rule 18)

	'('            shift, and enter state 16
	'\\'           shift, and enter state 17
	'if'           shift, and enter state 18
	L_ident        shift, and enter state 9
	L_integ        shift, and enter state 19

	Ident          goto state 10
	Integer        goto state 11
	Exp3           goto state 12
	Exp2           goto state 13
	Exp1           goto state 14
	Exp            goto state 38

State 17

	Exp -> '\\' . Ident '->' Exp                        (rule 26)

	L_ident        shift, and enter state 9

	Ident          goto state 37

State 18

	Exp -> 'if' . Exp1 'then' Exp1 'else' Exp           (rule 25)

	'('            shift, and enter state 16
	L_ident        shift, and enter state 9
	L_integ        shift, and enter state 19

	Ident          goto state 10
	Integer        goto state 11
	Exp3           goto state 12
	Exp2           goto state 13
	Exp1           goto state 36

State 19

	Integer -> L_integ .                                (rule 9)

	'('            reduce using rule 9
	')'            reduce using rule 9
	'+'            reduce using rule 9
	'-'            reduce using rule 9
	';'            reduce using rule 9
	'<'            reduce using rule 9
	'else'         reduce using rule 9
	'then'         reduce using rule 9
	L_ident        reduce using rule 9
	L_integ        reduce using rule 9
	%eof           reduce using rule 9


State 20

	%start_pExp1 -> Exp1 .                              (rule 6)
	Exp1 -> Exp1 . '+' Exp2                             (rule 21)
	Exp1 -> Exp1 . '-' Exp2                             (rule 22)
	Exp1 -> Exp1 . '<' Exp2                             (rule 23)

	'+'            shift, and enter state 33
	'-'            shift, and enter state 34
	'<'            shift, and enter state 35
	%eof           accept


State 21

	%start_pExp2 -> Exp2 .                              (rule 5)
	Exp2 -> Exp2 . Exp3                                 (rule 19)

	'('            shift, and enter state 16
	L_ident        shift, and enter state 9
	L_integ        shift, and enter state 19
	%eof           accept

	Ident          goto state 10
	Integer        goto state 11
	Exp3           goto state 32

State 22

	%start_pExp3 -> Exp3 .                              (rule 4)

	%eof           accept


State 23

	%start_pListIdent -> ListIdent .                    (rule 3)
	ListIdent -> ListIdent . Ident                      (rule 15)

	L_ident        shift, and enter state 9
	%eof           accept

	Ident          goto state 31

State 24

	%start_pListDef -> ListDef .                        (rule 2)
	ListDef -> ListDef . Def ';'                        (rule 13)

	L_ident        shift, and enter state 9
	%eof           accept

	Ident          goto state 25
	Def            goto state 29

State 25

	Def -> Ident . ListIdent '=' Exp                    (rule 11)

	'='            reduce using rule 14
	L_ident        reduce using rule 14

	ListIdent      goto state 30

State 26

	%start_pDef -> Def .                                (rule 1)

	%eof           accept


State 27

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 28

	Program -> ListDef .                                (rule 10)
	ListDef -> ListDef . Def ';'                        (rule 13)

	L_ident        shift, and enter state 9
	%eof           reduce using rule 10

	Ident          goto state 25
	Def            goto state 29

State 29

	ListDef -> ListDef Def . ';'                        (rule 13)

	';'            shift, and enter state 46


State 30

	Def -> Ident ListIdent . '=' Exp                    (rule 11)
	ListIdent -> ListIdent . Ident                      (rule 15)

	'='            shift, and enter state 45
	L_ident        shift, and enter state 9

	Ident          goto state 31

State 31

	ListIdent -> ListIdent Ident .                      (rule 15)

	'='            reduce using rule 15
	L_ident        reduce using rule 15
	%eof           reduce using rule 15


State 32

	Exp2 -> Exp2 Exp3 .                                 (rule 19)

	'('            reduce using rule 19
	')'            reduce using rule 19
	'+'            reduce using rule 19
	'-'            reduce using rule 19
	';'            reduce using rule 19
	'<'            reduce using rule 19
	'else'         reduce using rule 19
	'then'         reduce using rule 19
	L_ident        reduce using rule 19
	L_integ        reduce using rule 19
	%eof           reduce using rule 19


State 33

	Exp1 -> Exp1 '+' . Exp2                             (rule 21)

	'('            shift, and enter state 16
	L_ident        shift, and enter state 9
	L_integ        shift, and enter state 19

	Ident          goto state 10
	Integer        goto state 11
	Exp3           goto state 12
	Exp2           goto state 44

State 34

	Exp1 -> Exp1 '-' . Exp2                             (rule 22)

	'('            shift, and enter state 16
	L_ident        shift, and enter state 9
	L_integ        shift, and enter state 19

	Ident          goto state 10
	Integer        goto state 11
	Exp3           goto state 12
	Exp2           goto state 43

State 35

	Exp1 -> Exp1 '<' . Exp2                             (rule 23)

	'('            shift, and enter state 16
	L_ident        shift, and enter state 9
	L_integ        shift, and enter state 19

	Ident          goto state 10
	Integer        goto state 11
	Exp3           goto state 12
	Exp2           goto state 42

State 36

	Exp1 -> Exp1 . '+' Exp2                             (rule 21)
	Exp1 -> Exp1 . '-' Exp2                             (rule 22)
	Exp1 -> Exp1 . '<' Exp2                             (rule 23)
	Exp -> 'if' Exp1 . 'then' Exp1 'else' Exp           (rule 25)

	'+'            shift, and enter state 33
	'-'            shift, and enter state 34
	'<'            shift, and enter state 35
	'then'         shift, and enter state 41


State 37

	Exp -> '\\' Ident . '->' Exp                        (rule 26)

	'->'           shift, and enter state 40


State 38

	Exp3 -> '(' Exp . ')'                               (rule 18)

	')'            shift, and enter state 39


State 39

	Exp3 -> '(' Exp ')' .                               (rule 18)

	'('            reduce using rule 18
	')'            reduce using rule 18
	'+'            reduce using rule 18
	'-'            reduce using rule 18
	';'            reduce using rule 18
	'<'            reduce using rule 18
	'else'         reduce using rule 18
	'then'         reduce using rule 18
	L_ident        reduce using rule 18
	L_integ        reduce using rule 18
	%eof           reduce using rule 18


State 40

	Exp -> '\\' Ident '->' . Exp                        (rule 26)

	'('            shift, and enter state 16
	'\\'           shift, and enter state 17
	'if'           shift, and enter state 18
	L_ident        shift, and enter state 9
	L_integ        shift, and enter state 19

	Ident          goto state 10
	Integer        goto state 11
	Exp3           goto state 12
	Exp2           goto state 13
	Exp1           goto state 14
	Exp            goto state 49

State 41

	Exp -> 'if' Exp1 'then' . Exp1 'else' Exp           (rule 25)

	'('            shift, and enter state 16
	L_ident        shift, and enter state 9
	L_integ        shift, and enter state 19

	Ident          goto state 10
	Integer        goto state 11
	Exp3           goto state 12
	Exp2           goto state 13
	Exp1           goto state 48

State 42

	Exp2 -> Exp2 . Exp3                                 (rule 19)
	Exp1 -> Exp1 '<' Exp2 .                             (rule 23)

	'('            shift, and enter state 16
	')'            reduce using rule 23
	'+'            reduce using rule 23
	'-'            reduce using rule 23
	';'            reduce using rule 23
	'<'            reduce using rule 23
	'else'         reduce using rule 23
	'then'         reduce using rule 23
	L_ident        shift, and enter state 9
	L_integ        shift, and enter state 19
	%eof           reduce using rule 23

	Ident          goto state 10
	Integer        goto state 11
	Exp3           goto state 32

State 43

	Exp2 -> Exp2 . Exp3                                 (rule 19)
	Exp1 -> Exp1 '-' Exp2 .                             (rule 22)

	'('            shift, and enter state 16
	')'            reduce using rule 22
	'+'            reduce using rule 22
	'-'            reduce using rule 22
	';'            reduce using rule 22
	'<'            reduce using rule 22
	'else'         reduce using rule 22
	'then'         reduce using rule 22
	L_ident        shift, and enter state 9
	L_integ        shift, and enter state 19
	%eof           reduce using rule 22

	Ident          goto state 10
	Integer        goto state 11
	Exp3           goto state 32

State 44

	Exp2 -> Exp2 . Exp3                                 (rule 19)
	Exp1 -> Exp1 '+' Exp2 .                             (rule 21)

	'('            shift, and enter state 16
	')'            reduce using rule 21
	'+'            reduce using rule 21
	'-'            reduce using rule 21
	';'            reduce using rule 21
	'<'            reduce using rule 21
	'else'         reduce using rule 21
	'then'         reduce using rule 21
	L_ident        shift, and enter state 9
	L_integ        shift, and enter state 19
	%eof           reduce using rule 21

	Ident          goto state 10
	Integer        goto state 11
	Exp3           goto state 32

State 45

	Def -> Ident ListIdent '=' . Exp                    (rule 11)

	'('            shift, and enter state 16
	'\\'           shift, and enter state 17
	'if'           shift, and enter state 18
	L_ident        shift, and enter state 9
	L_integ        shift, and enter state 19

	Ident          goto state 10
	Integer        goto state 11
	Exp3           goto state 12
	Exp2           goto state 13
	Exp1           goto state 14
	Exp            goto state 47

State 46

	ListDef -> ListDef Def ';' .                        (rule 13)

	L_ident        reduce using rule 13
	%eof           reduce using rule 13


State 47

	Def -> Ident ListIdent '=' Exp .                    (rule 11)

	';'            reduce using rule 11
	%eof           reduce using rule 11


State 48

	Exp1 -> Exp1 . '+' Exp2                             (rule 21)
	Exp1 -> Exp1 . '-' Exp2                             (rule 22)
	Exp1 -> Exp1 . '<' Exp2                             (rule 23)
	Exp -> 'if' Exp1 'then' Exp1 . 'else' Exp           (rule 25)

	'+'            shift, and enter state 33
	'-'            shift, and enter state 34
	'<'            shift, and enter state 35
	'else'         shift, and enter state 50


State 49

	Exp -> '\\' Ident '->' Exp .                        (rule 26)

	')'            reduce using rule 26
	';'            reduce using rule 26
	%eof           reduce using rule 26


State 50

	Exp -> 'if' Exp1 'then' Exp1 'else' . Exp           (rule 25)

	'('            shift, and enter state 16
	'\\'           shift, and enter state 17
	'if'           shift, and enter state 18
	L_ident        shift, and enter state 9
	L_integ        shift, and enter state 19

	Ident          goto state 10
	Integer        goto state 11
	Exp3           goto state 12
	Exp2           goto state 13
	Exp1           goto state 14
	Exp            goto state 51

State 51

	Exp -> 'if' Exp1 'then' Exp1 'else' Exp .           (rule 25)

	')'            reduce using rule 25
	';'            reduce using rule 25
	%eof           reduce using rule 25


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 28
Number of terminals: 15
Number of non-terminals: 18
Number of states: 52
