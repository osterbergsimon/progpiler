module Skelgrammar where

-- Haskell module generated by the BNF converter

import Absgrammar
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transId :: Id -> Result
transId x = case x of
  Id str  -> failure x


transProgram :: Program -> Result
transProgram x = case x of
  PDefs defs  -> failure x


transDef :: Def -> Result
transDef x = case x of
  DFun type' id args stms  -> failure x
  DNFun type' id args  -> failure x
  DIFun type' id args stms  -> failure x
  DIFun2 type' id args  -> failure x
  DQC qclist  -> failure x
  DTypeD type' id  -> failure x
  DDecl dec  -> failure x
  DStruct id decs  -> failure x


transArg :: Arg -> Result
transArg x = case x of
  ArgDecl argument  -> failure x
  CArgDecl argument  -> failure x


transDec :: Dec -> Result
transDec x = case x of
  Decl declaration  -> failure x
  CDecl declaration  -> failure x


transArgument :: Argument -> Result
transArgument x = case x of
  ArgumentType type'  -> failure x
  Argument_2 type' id  -> failure x
  Argument_3 type' id exp  -> failure x
  Argument_4 type'  -> failure x
  Argument_5 type' id  -> failure x
  Argument_6 type' id exp  -> failure x


transDeclaration :: Declaration -> Result
transDeclaration x = case x of
  Declaration_1 type' ids  -> failure x
  Declaration_2 type' id exp  -> failure x
  Declaration_3 type' ids  -> failure x
  Declaration_4 type' id exp  -> failure x


transStm :: Stm -> Result
transStm x = case x of
  SExp exp  -> failure x
  SReturn exp  -> failure x
  SReturnVoid  -> failure x
  SWhile exp stm  -> failure x
  SDoWhile stm exp  -> failure x
  SBlock stms  -> failure x
  SIf exp stm  -> failure x
  SIfElse exp stm1 stm2  -> failure x
  SFor type' exp1 exp2 exp3 stm4  -> failure x
  STypedef type' id  -> failure x
  SStruct id decs  -> failure x
  SDec dec  -> failure x


transExp :: Exp -> Result
transExp x = case x of
  EInt n  -> failure x
  EDouble d  -> failure x
  EString strs  -> failure x
  EChar c  -> failure x
  ETrue  -> failure x
  EFalse  -> failure x
  ECid qclist  -> failure x
  ECall id exps  -> failure x
  EInd id exp  -> failure x
  EPIncr exp  -> failure x
  EPDecr exp  -> failure x
  EPStr1 exp1 exp2  -> failure x
  EPStr2 exp1 exp2  -> failure x
  EDeref exp  -> failure x
  EIncr exp  -> failure x
  EDecr exp  -> failure x
  ENeg exp  -> failure x
  EMul exp1 exp2  -> failure x
  EDiv exp1 exp2  -> failure x
  ERem exp1 exp2  -> failure x
  EAdd exp1 exp2  -> failure x
  ESub exp1 exp2  -> failure x
  ELef exp1 exp2  -> failure x
  ERig exp1 exp2  -> failure x
  ELt exp1 exp2  -> failure x
  EGt exp1 exp2  -> failure x
  ELEq exp1 exp2  -> failure x
  EGEq exp1 exp2  -> failure x
  EEq exp1 exp2  -> failure x
  ENEq exp1 exp2  -> failure x
  EAnd exp1 exp2  -> failure x
  EOr exp1 exp2  -> failure x
  EAss exp1 exp2  -> failure x
  EPAss exp1 exp2  -> failure x
  ENAss exp1 exp2  -> failure x
  ECon exp1 exp2 exp3  -> failure x
  EExc exp  -> failure x


transType :: Type -> Result
transType x = case x of
  Type_bool  -> failure x
  Type_int  -> failure x
  Type_double  -> failure x
  Type_void  -> failure x
  TypeQCList qclist  -> failure x


transQCList :: QCList -> Result
transQCList x = case x of
  QCL qconss  -> failure x


transQcons :: Qcons -> Result
transQcons x = case x of
  QId id  -> failure x
  QTempi id types  -> failure x



