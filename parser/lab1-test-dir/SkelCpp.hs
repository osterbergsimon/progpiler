module SkelCpp where

-- Haskell module generated by the BNF converter

import AbsCpp
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transId :: Id -> Result
transId x = case x of
  Id str  -> failure x


transProgram :: Program -> Result
transProgram x = case x of
  PDefs defs  -> failure x


transDef :: Def -> Result
transDef x = case x of
  DFun type' id args stms  -> failure x


transArg :: Arg -> Result
transArg x = case x of
  ADecl type' id  -> failure x


transStm :: Stm -> Result
transStm x = case x of
  SExp exp  -> failure x
  SDecl type' id  -> failure x
  SDecls type' id ids  -> failure x
  SInit type' id exp  -> failure x
  SReturn exp  -> failure x
  SReturnVoid  -> failure x
  SWhile exp stm  -> failure x
  SDoWhile stm exp  -> failure x
  SBlock stms  -> failure x
  SIf exp stm  -> failure x
  SIfElse exp stm1 stm2  -> failure x
  SFor exp1 exp2 exp3 stm4  -> failure x
  STypedef exp id  -> failure x
  SStruct id stms  -> failure x


transExp :: Exp -> Result
transExp x = case x of
  EInt n  -> failure x
  EDouble d  -> failure x
  EString str  -> failure x
  ETrue  -> failure x
  EFalse  -> failure x
  EId id  -> failure x
  ECall id exps  -> failure x
  EInd id exp  -> failure x
  EPIncr exp  -> failure x
  EPDecr exp  -> failure x
  EPStr1 exp1 exp2  -> failure x
  EPStr2 exp1 exp2  -> failure x
  EIncr exp  -> failure x
  EDecr exp  -> failure x
  ENeg exp  -> failure x
  EMul exp1 exp2  -> failure x
  EDiv exp1 exp2  -> failure x
  ERem exp1 exp2  -> failure x
  EAdd exp1 exp2  -> failure x
  ESub exp1 exp2  -> failure x
  ELef exp1 exp2  -> failure x
  ERig exp1 exp2  -> failure x
  ELt exp1 exp2  -> failure x
  EGt exp1 exp2  -> failure x
  ELEq exp1 exp2  -> failure x
  EGEq exp1 exp2  -> failure x
  EEq exp1 exp2  -> failure x
  ENEq exp1 exp2  -> failure x
  EAnd exp1 exp2  -> failure x
  EOr exp1 exp2  -> failure x
  EAss exp1 exp2  -> failure x
  EPAss exp1 exp2  -> failure x
  ENAss exp1 exp2  -> failure x
  ECon exp1 exp2 exp3  -> failure x
  EExc exp  -> failure x
  ETempi id types  -> failure x
  QC exp1 exp2  -> failure x


transType :: Type -> Result
transType x = case x of
  Type_bool  -> failure x
  Type_int  -> failure x
  Type_double  -> failure x
  Type_void  -> failure x
  Type_string  -> failure x



