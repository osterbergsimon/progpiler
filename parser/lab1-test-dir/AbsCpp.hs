module AbsCpp where

-- Haskell module generated by the BNF converter


newtype Id = Id ((Int,Int),String) deriving (Eq,Ord,Show)
data Program =
   PDefs [Def]
  deriving (Eq,Ord,Show)

data Def =
   DFun Type Id [Arg] [Stm]
  deriving (Eq,Ord,Show)

data Arg =
   ADecl Type Id
  deriving (Eq,Ord,Show)

data Stm =
   SExp Exp
 | SDecl Type Id
 | SDecls Type Id [Id]
 | SInit Type Id Exp
 | SReturn Exp
 | SReturnVoid
 | SWhile Exp Stm
 | SDoWhile Stm Exp
 | SBlock [Stm]
 | SIf Exp Stm
 | SIfElse Exp Stm Stm
 | SFor Exp Exp Exp Stm
 | STypedef Exp Id
 | SStruct Id [Stm]
  deriving (Eq,Ord,Show)

data Exp =
   EInt Integer
 | EDouble Double
 | EString String
 | ETrue
 | EFalse
 | EId Id
 | ECall Id [Exp]
 | EInd Id Exp
 | EPIncr Exp
 | EPDecr Exp
 | EPStr1 Exp Exp
 | EPStr2 Exp Exp
 | EIncr Exp
 | EDecr Exp
 | ENeg Exp
 | EMul Exp Exp
 | EDiv Exp Exp
 | ERem Exp Exp
 | EAdd Exp Exp
 | ESub Exp Exp
 | ELef Exp Exp
 | ERig Exp Exp
 | ELt Exp Exp
 | EGt Exp Exp
 | ELEq Exp Exp
 | EGEq Exp Exp
 | EEq Exp Exp
 | ENEq Exp Exp
 | EAnd Exp Exp
 | EOr Exp Exp
 | EAss Exp Exp
 | EPAss Exp Exp
 | ENAss Exp Exp
 | ECon Exp Exp Exp
 | EExc Exp
 | ETempi Id [Type]
 | QC Exp Exp
  deriving (Eq,Ord,Show)

data Type =
   Type_bool
 | Type_int
 | Type_double
 | Type_void
 | Type_string
  deriving (Eq,Ord,Show)

