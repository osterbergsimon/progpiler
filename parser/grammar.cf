PDefs. Program ::= [Def] ;
terminator Def "" ;

comment "//" ;
comment "/*" "*/" ;

DFun. Def ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;
separator Arg "," ;
terminator Stm "" ;

ADecl. Arg ::= Type Id ;

SExp. Stm ::= Exp ";" ;

SDecl. Stm ::= Type Id ";" ;
SDecls. Stm ::= Type Id "," [Id] ";" ;
SInit. Stm ::= Type Id "=" Exp ";" ;

SReturn. Stm ::= "return" Exp ";" ;
SWhile. Stm ::= "while" "(" Exp ")" Stm ;
SBlock. Stm ::= "{" [Stm] "}" ;
SIfElse. Stm ::= "if" "(" Exp ")" Stm "else" Stm ;

EInt. Exp16 ::= Integer ;
EDouble. Exp16 ::= Double ;
EString. Exp16 ::= String ;
ETrue. Exp16 ::= "true" ;
EFalse. Exp16 ::= "false" ;
EId. Exp16 ::= Id ;
ECall. Exp15 ::= Id "(" [Exp] ")" ;
EInd. Exp15 ::= Id "[" Exp "]" ;
EPIncr. Exp14 ::= Exp15 "++" ;
EPDecr. Exp14 ::= Exp15 "--" ;
EIncr. Exp13 ::= "++" Exp14 ;
EDecr. Exp13 ::= "--" Exp14 ;
ENeg. Exp13 ::= "!" Exp14 ;
EMul. Exp12 ::= Exp13 "*" Exp12 ;
EDiv. Exp12 ::= Exp13 "/" Exp12 ;
EAdd. Exp11 ::= Exp12 "+" Exp11 ;
ESub. Exp11 ::= Exp12 "-" Exp11 ;
ELt. Exp9 ::= Exp9 "<" Exp9 ;
EGt. Exp9 ::= Exp9 ">" Exp9 ;
ELEq. Exp9 ::= Exp9 "<=" Exp9 ;
EGEq. Exp9 ::= Exp9 ">=" Exp9 ;
EEq. Exp8 ::= Exp8 "==" Exp8 ;
ENEq. Exp8 ::= Exp8 "!=" Exp8 ;
EAnd. Exp4 ::= Exp5 "&&" Exp4 ;
EOr. Exp3 ::= Exp4 "||" Exp3 ;
EAss. Exp2 ::= Exp3 "=" Exp2 ;

coercions Exp 16 ;
separator Exp "," ;

Tbool. Type ::= "bool" ;
Tdouble. Type ::= "double" ;
Tint. Type ::= "int" ;
Tstring. Type ::= "string" ;
Tvoid. Type ::= "void" ;

separator nonempty Type "," ;

ETempi. Exp15 ::= Id "<"[Type]">" ;
QC. Exp16 ::= Exp16 "::" Exp15; 

position token Id (letter (letter | digit | '_')*) ;
separator  nonempty Id "," ;
